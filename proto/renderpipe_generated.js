// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var renderpipe = renderpipe || {};

/**
 * @const
 * @namespace
 */
renderpipe.proto = renderpipe.proto || {};

/**
 * @enum {number}
 */
renderpipe.proto.ShaderType = {
  Fragment: 0,
  Vertex: 1,
  Compute: 2
};

/**
 * @enum {string}
 */
renderpipe.proto.ShaderTypeName = {
  0: 'Fragment',
  1: 'Vertex',
  2: 'Compute'
};

/**
 * @constructor
 */
renderpipe.proto.uvec3 = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {renderpipe.proto.uvec3}
 */
renderpipe.proto.uvec3.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {number}
 */
renderpipe.proto.uvec3.prototype.x = function() {
  return this.bb.readUint32(this.bb_pos);
};

/**
 * @param {number} value
 * @returns {boolean}
 */
renderpipe.proto.uvec3.prototype.mutate_x = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 0);

  if (offset === 0) {
    return false;
  }

  this.bb.writeUint32(this.bb_pos + offset, value);
  return true;
};

/**
 * @returns {number}
 */
renderpipe.proto.uvec3.prototype.y = function() {
  return this.bb.readUint32(this.bb_pos + 4);
};

/**
 * @param {number} value
 * @returns {boolean}
 */
renderpipe.proto.uvec3.prototype.mutate_y = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 4);

  if (offset === 0) {
    return false;
  }

  this.bb.writeUint32(this.bb_pos + offset, value);
  return true;
};

/**
 * @returns {number}
 */
renderpipe.proto.uvec3.prototype.z = function() {
  return this.bb.readUint32(this.bb_pos + 8);
};

/**
 * @param {number} value
 * @returns {boolean}
 */
renderpipe.proto.uvec3.prototype.mutate_z = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 8);

  if (offset === 0) {
    return false;
  }

  this.bb.writeUint32(this.bb_pos + offset, value);
  return true;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @returns {flatbuffers.Offset}
 */
renderpipe.proto.uvec3.createuvec3 = function(builder, x, y, z) {
  builder.prep(4, 12);
  builder.writeInt32(z);
  builder.writeInt32(y);
  builder.writeInt32(x);
  return builder.offset();
};

/**
 * @constructor
 */
renderpipe.proto.Buffer = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {renderpipe.proto.Buffer}
 */
renderpipe.proto.Buffer.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {renderpipe.proto.Buffer=} obj
 * @returns {renderpipe.proto.Buffer}
 */
renderpipe.proto.Buffer.getRootAsBuffer = function(bb, obj) {
  return (obj || new renderpipe.proto.Buffer).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
renderpipe.proto.Buffer.prototype.id = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param {number} value
 * @returns {boolean}
 */
renderpipe.proto.Buffer.prototype.mutate_id = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 4);

  if (offset === 0) {
    return false;
  }

  this.bb.writeUint32(this.bb_pos + offset, value);
  return true;
};

/**
 * @returns {number}
 */
renderpipe.proto.Buffer.prototype.length = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param {number} value
 * @returns {boolean}
 */
renderpipe.proto.Buffer.prototype.mutate_length = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 6);

  if (offset === 0) {
    return false;
  }

  this.bb.writeUint32(this.bb_pos + offset, value);
  return true;
};

/**
 * @param {number} index
 * @returns {number}
 */
renderpipe.proto.Buffer.prototype.initial = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
};

/**
 * @returns {number}
 */
renderpipe.proto.Buffer.prototype.initialLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Uint8Array}
 */
renderpipe.proto.Buffer.prototype.initialArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
renderpipe.proto.Buffer.startBuffer = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} id
 */
renderpipe.proto.Buffer.addId = function(builder, id) {
  builder.addFieldInt32(0, id, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} length
 */
renderpipe.proto.Buffer.addLength = function(builder, length) {
  builder.addFieldInt32(1, length, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} initialOffset
 */
renderpipe.proto.Buffer.addInitial = function(builder, initialOffset) {
  builder.addFieldOffset(2, initialOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
renderpipe.proto.Buffer.createInitialVector = function(builder, data) {
  builder.startVector(1, data.length, 1);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
renderpipe.proto.Buffer.startInitialVector = function(builder, numElems) {
  builder.startVector(1, numElems, 1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
renderpipe.proto.Buffer.endBuffer = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} id
 * @param {number} length
 * @param {flatbuffers.Offset} initialOffset
 * @returns {flatbuffers.Offset}
 */
renderpipe.proto.Buffer.createBuffer = function(builder, id, length, initialOffset) {
  renderpipe.proto.Buffer.startBuffer(builder);
  renderpipe.proto.Buffer.addId(builder, id);
  renderpipe.proto.Buffer.addLength(builder, length);
  renderpipe.proto.Buffer.addInitial(builder, initialOffset);
  return renderpipe.proto.Buffer.endBuffer(builder);
}

/**
 * @constructor
 */
renderpipe.proto.Shader = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {renderpipe.proto.Shader}
 */
renderpipe.proto.Shader.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {renderpipe.proto.Shader=} obj
 * @returns {renderpipe.proto.Shader}
 */
renderpipe.proto.Shader.getRootAsShader = function(bb, obj) {
  return (obj || new renderpipe.proto.Shader).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {renderpipe.proto.ShaderType}
 */
renderpipe.proto.Shader.prototype.type = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {renderpipe.proto.ShaderType} */ (this.bb.readUint8(this.bb_pos + offset)) : renderpipe.proto.ShaderType.Fragment;
};

/**
 * @param {renderpipe.proto.ShaderType} value
 * @returns {boolean}
 */
renderpipe.proto.Shader.prototype.mutate_type = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 4);

  if (offset === 0) {
    return false;
  }

  this.bb.writeUint8(this.bb_pos + offset, value);
  return true;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
renderpipe.proto.Shader.prototype.hash = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
renderpipe.proto.Shader.prototype.filename = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
renderpipe.proto.Shader.prototype.source = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
renderpipe.proto.Shader.startShader = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {renderpipe.proto.ShaderType} type
 */
renderpipe.proto.Shader.addType = function(builder, type) {
  builder.addFieldInt8(0, type, renderpipe.proto.ShaderType.Fragment);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} hashOffset
 */
renderpipe.proto.Shader.addHash = function(builder, hashOffset) {
  builder.addFieldOffset(1, hashOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} filenameOffset
 */
renderpipe.proto.Shader.addFilename = function(builder, filenameOffset) {
  builder.addFieldOffset(2, filenameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} sourceOffset
 */
renderpipe.proto.Shader.addSource = function(builder, sourceOffset) {
  builder.addFieldOffset(3, sourceOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
renderpipe.proto.Shader.endShader = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {renderpipe.proto.ShaderType} type
 * @param {flatbuffers.Offset} hashOffset
 * @param {flatbuffers.Offset} filenameOffset
 * @param {flatbuffers.Offset} sourceOffset
 * @returns {flatbuffers.Offset}
 */
renderpipe.proto.Shader.createShader = function(builder, type, hashOffset, filenameOffset, sourceOffset) {
  renderpipe.proto.Shader.startShader(builder);
  renderpipe.proto.Shader.addType(builder, type);
  renderpipe.proto.Shader.addHash(builder, hashOffset);
  renderpipe.proto.Shader.addFilename(builder, filenameOffset);
  renderpipe.proto.Shader.addSource(builder, sourceOffset);
  return renderpipe.proto.Shader.endShader(builder);
}

/**
 * @constructor
 */
renderpipe.proto.Program = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {renderpipe.proto.Program}
 */
renderpipe.proto.Program.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {renderpipe.proto.Program=} obj
 * @returns {renderpipe.proto.Program}
 */
renderpipe.proto.Program.getRootAsProgram = function(bb, obj) {
  return (obj || new renderpipe.proto.Program).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
renderpipe.proto.Program.prototype.type = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
renderpipe.proto.Program.prototype.hash = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {number} index
 * @param {renderpipe.proto.Shader=} obj
 * @returns {renderpipe.proto.Shader}
 */
renderpipe.proto.Program.prototype.shaders = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new renderpipe.proto.Shader).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
renderpipe.proto.Program.prototype.shadersLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
renderpipe.proto.Program.startProgram = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} typeOffset
 */
renderpipe.proto.Program.addType = function(builder, typeOffset) {
  builder.addFieldOffset(0, typeOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} hashOffset
 */
renderpipe.proto.Program.addHash = function(builder, hashOffset) {
  builder.addFieldOffset(1, hashOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} shadersOffset
 */
renderpipe.proto.Program.addShaders = function(builder, shadersOffset) {
  builder.addFieldOffset(2, shadersOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
renderpipe.proto.Program.createShadersVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
renderpipe.proto.Program.startShadersVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
renderpipe.proto.Program.endProgram = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} typeOffset
 * @param {flatbuffers.Offset} hashOffset
 * @param {flatbuffers.Offset} shadersOffset
 * @returns {flatbuffers.Offset}
 */
renderpipe.proto.Program.createProgram = function(builder, typeOffset, hashOffset, shadersOffset) {
  renderpipe.proto.Program.startProgram(builder);
  renderpipe.proto.Program.addType(builder, typeOffset);
  renderpipe.proto.Program.addHash(builder, hashOffset);
  renderpipe.proto.Program.addShaders(builder, shadersOffset);
  return renderpipe.proto.Program.endProgram(builder);
}

/**
 * @constructor
 */
renderpipe.proto.ProgramInvocation = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {renderpipe.proto.ProgramInvocation}
 */
renderpipe.proto.ProgramInvocation.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {renderpipe.proto.ProgramInvocation=} obj
 * @returns {renderpipe.proto.ProgramInvocation}
 */
renderpipe.proto.ProgramInvocation.getRootAsProgramInvocation = function(bb, obj) {
  return (obj || new renderpipe.proto.ProgramInvocation).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
renderpipe.proto.ProgramInvocation.prototype.program = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {renderpipe.proto.uvec3=} obj
 * @returns {renderpipe.proto.uvec3|null}
 */
renderpipe.proto.ProgramInvocation.prototype.dims = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new renderpipe.proto.uvec3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
renderpipe.proto.ProgramInvocation.startProgramInvocation = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} programOffset
 */
renderpipe.proto.ProgramInvocation.addProgram = function(builder, programOffset) {
  builder.addFieldOffset(0, programOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} dimsOffset
 */
renderpipe.proto.ProgramInvocation.addDims = function(builder, dimsOffset) {
  builder.addFieldStruct(1, dimsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
renderpipe.proto.ProgramInvocation.endProgramInvocation = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} programOffset
 * @param {flatbuffers.Offset} dimsOffset
 * @returns {flatbuffers.Offset}
 */
renderpipe.proto.ProgramInvocation.createProgramInvocation = function(builder, programOffset, dimsOffset) {
  renderpipe.proto.ProgramInvocation.startProgramInvocation(builder);
  renderpipe.proto.ProgramInvocation.addProgram(builder, programOffset);
  renderpipe.proto.ProgramInvocation.addDims(builder, dimsOffset);
  return renderpipe.proto.ProgramInvocation.endProgramInvocation(builder);
}

/**
 * @constructor
 */
renderpipe.proto.Stage = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {renderpipe.proto.Stage}
 */
renderpipe.proto.Stage.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {renderpipe.proto.Stage=} obj
 * @returns {renderpipe.proto.Stage}
 */
renderpipe.proto.Stage.getRootAsStage = function(bb, obj) {
  return (obj || new renderpipe.proto.Stage).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
renderpipe.proto.Stage.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {number} index
 * @param {renderpipe.proto.ProgramInvocation=} obj
 * @returns {renderpipe.proto.ProgramInvocation}
 */
renderpipe.proto.Stage.prototype.invocations = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new renderpipe.proto.ProgramInvocation).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
renderpipe.proto.Stage.prototype.invocationsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
renderpipe.proto.Stage.startStage = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
renderpipe.proto.Stage.addName = function(builder, nameOffset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} invocationsOffset
 */
renderpipe.proto.Stage.addInvocations = function(builder, invocationsOffset) {
  builder.addFieldOffset(1, invocationsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
renderpipe.proto.Stage.createInvocationsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
renderpipe.proto.Stage.startInvocationsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
renderpipe.proto.Stage.endStage = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 * @param {flatbuffers.Offset} invocationsOffset
 * @returns {flatbuffers.Offset}
 */
renderpipe.proto.Stage.createStage = function(builder, nameOffset, invocationsOffset) {
  renderpipe.proto.Stage.startStage(builder);
  renderpipe.proto.Stage.addName(builder, nameOffset);
  renderpipe.proto.Stage.addInvocations(builder, invocationsOffset);
  return renderpipe.proto.Stage.endStage(builder);
}

/**
 * @constructor
 */
renderpipe.proto.Scene = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {renderpipe.proto.Scene}
 */
renderpipe.proto.Scene.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {renderpipe.proto.Scene=} obj
 * @returns {renderpipe.proto.Scene}
 */
renderpipe.proto.Scene.getRootAsScene = function(bb, obj) {
  return (obj || new renderpipe.proto.Scene).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
renderpipe.proto.Scene.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {number} index
 * @param {renderpipe.proto.Buffer=} obj
 * @returns {renderpipe.proto.Buffer}
 */
renderpipe.proto.Scene.prototype.buffers = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new renderpipe.proto.Buffer).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
renderpipe.proto.Scene.prototype.buffersLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @param {renderpipe.proto.Program=} obj
 * @returns {renderpipe.proto.Program}
 */
renderpipe.proto.Scene.prototype.programs = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new renderpipe.proto.Program).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
renderpipe.proto.Scene.prototype.programsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @param {renderpipe.proto.Stage=} obj
 * @returns {renderpipe.proto.Stage}
 */
renderpipe.proto.Scene.prototype.stages = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? (obj || new renderpipe.proto.Stage).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
renderpipe.proto.Scene.prototype.stagesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
renderpipe.proto.Scene.startScene = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
renderpipe.proto.Scene.addName = function(builder, nameOffset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} buffersOffset
 */
renderpipe.proto.Scene.addBuffers = function(builder, buffersOffset) {
  builder.addFieldOffset(1, buffersOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
renderpipe.proto.Scene.createBuffersVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
renderpipe.proto.Scene.startBuffersVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} programsOffset
 */
renderpipe.proto.Scene.addPrograms = function(builder, programsOffset) {
  builder.addFieldOffset(2, programsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
renderpipe.proto.Scene.createProgramsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
renderpipe.proto.Scene.startProgramsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} stagesOffset
 */
renderpipe.proto.Scene.addStages = function(builder, stagesOffset) {
  builder.addFieldOffset(3, stagesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
renderpipe.proto.Scene.createStagesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
renderpipe.proto.Scene.startStagesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
renderpipe.proto.Scene.endScene = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
renderpipe.proto.Scene.finishSceneBuffer = function(builder, offset) {
  builder.finish(offset);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 * @param {flatbuffers.Offset} buffersOffset
 * @param {flatbuffers.Offset} programsOffset
 * @param {flatbuffers.Offset} stagesOffset
 * @returns {flatbuffers.Offset}
 */
renderpipe.proto.Scene.createScene = function(builder, nameOffset, buffersOffset, programsOffset, stagesOffset) {
  renderpipe.proto.Scene.startScene(builder);
  renderpipe.proto.Scene.addName(builder, nameOffset);
  renderpipe.proto.Scene.addBuffers(builder, buffersOffset);
  renderpipe.proto.Scene.addPrograms(builder, programsOffset);
  renderpipe.proto.Scene.addStages(builder, stagesOffset);
  return renderpipe.proto.Scene.endScene(builder);
}

// Exports for Node.js and RequireJS
this.renderpipe = renderpipe;
