// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RENDERPIPE_RENDERPIPE_PROTO_H_
#define FLATBUFFERS_GENERATED_RENDERPIPE_RENDERPIPE_PROTO_H_

#include "flatbuffers/flatbuffers.h"

namespace renderpipe {
namespace proto {

struct uvec3;

struct Buffer;

struct Scene;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) uvec3 FLATBUFFERS_FINAL_CLASS {
 private:
  uint32_t x_;
  uint32_t y_;
  uint32_t z_;

 public:
  uvec3() {
    memset(static_cast<void *>(this), 0, sizeof(uvec3));
  }
  uvec3(uint32_t _x, uint32_t _y, uint32_t _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  uint32_t x() const {
    return flatbuffers::EndianScalar(x_);
  }
  void mutate_x(uint32_t _x) {
    flatbuffers::WriteScalar(&x_, _x);
  }
  uint32_t y() const {
    return flatbuffers::EndianScalar(y_);
  }
  void mutate_y(uint32_t _y) {
    flatbuffers::WriteScalar(&y_, _y);
  }
  uint32_t z() const {
    return flatbuffers::EndianScalar(z_);
  }
  void mutate_z(uint32_t _z) {
    flatbuffers::WriteScalar(&z_, _z);
  }
};
FLATBUFFERS_STRUCT_END(uvec3, 12);

struct Buffer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DIMS = 4,
    VT_LENGTH = 6,
    VT_INITIAL = 8
  };
  const uvec3 *dims() const {
    return GetStruct<const uvec3 *>(VT_DIMS);
  }
  uvec3 *mutable_dims() {
    return GetStruct<uvec3 *>(VT_DIMS);
  }
  uint32_t length() const {
    return GetField<uint32_t>(VT_LENGTH, 0);
  }
  bool mutate_length(uint32_t _length) {
    return SetField<uint32_t>(VT_LENGTH, _length, 0);
  }
  const flatbuffers::Vector<uint8_t> *initial() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_INITIAL);
  }
  flatbuffers::Vector<uint8_t> *mutable_initial() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_INITIAL);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uvec3>(verifier, VT_DIMS) &&
           VerifyField<uint32_t>(verifier, VT_LENGTH) &&
           VerifyOffset(verifier, VT_INITIAL) &&
           verifier.VerifyVector(initial()) &&
           verifier.EndTable();
  }
};

struct BufferBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_dims(const uvec3 *dims) {
    fbb_.AddStruct(Buffer::VT_DIMS, dims);
  }
  void add_length(uint32_t length) {
    fbb_.AddElement<uint32_t>(Buffer::VT_LENGTH, length, 0);
  }
  void add_initial(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> initial) {
    fbb_.AddOffset(Buffer::VT_INITIAL, initial);
  }
  explicit BufferBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BufferBuilder &operator=(const BufferBuilder &);
  flatbuffers::Offset<Buffer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Buffer>(end);
    return o;
  }
};

inline flatbuffers::Offset<Buffer> CreateBuffer(
    flatbuffers::FlatBufferBuilder &_fbb,
    const uvec3 *dims = 0,
    uint32_t length = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> initial = 0) {
  BufferBuilder builder_(_fbb);
  builder_.add_initial(initial);
  builder_.add_length(length);
  builder_.add_dims(dims);
  return builder_.Finish();
}

inline flatbuffers::Offset<Buffer> CreateBufferDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const uvec3 *dims = 0,
    uint32_t length = 0,
    const std::vector<uint8_t> *initial = nullptr) {
  auto initial__ = initial ? _fbb.CreateVector<uint8_t>(*initial) : 0;
  return renderpipe::proto::CreateBuffer(
      _fbb,
      dims,
      length,
      initial__);
}

struct Scene FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BUFFERS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Buffer>> *buffers() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Buffer>> *>(VT_BUFFERS);
  }
  flatbuffers::Vector<flatbuffers::Offset<Buffer>> *mutable_buffers() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<Buffer>> *>(VT_BUFFERS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_BUFFERS) &&
           verifier.VerifyVector(buffers()) &&
           verifier.VerifyVectorOfTables(buffers()) &&
           verifier.EndTable();
  }
};

struct SceneBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_buffers(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Buffer>>> buffers) {
    fbb_.AddOffset(Scene::VT_BUFFERS, buffers);
  }
  explicit SceneBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SceneBuilder &operator=(const SceneBuilder &);
  flatbuffers::Offset<Scene> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Scene>(end);
    return o;
  }
};

inline flatbuffers::Offset<Scene> CreateScene(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Buffer>>> buffers = 0) {
  SceneBuilder builder_(_fbb);
  builder_.add_buffers(buffers);
  return builder_.Finish();
}

inline flatbuffers::Offset<Scene> CreateSceneDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Buffer>> *buffers = nullptr) {
  auto buffers__ = buffers ? _fbb.CreateVector<flatbuffers::Offset<Buffer>>(*buffers) : 0;
  return renderpipe::proto::CreateScene(
      _fbb,
      buffers__);
}

inline const renderpipe::proto::Scene *GetScene(const void *buf) {
  return flatbuffers::GetRoot<renderpipe::proto::Scene>(buf);
}

inline const renderpipe::proto::Scene *GetSizePrefixedScene(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<renderpipe::proto::Scene>(buf);
}

inline Scene *GetMutableScene(void *buf) {
  return flatbuffers::GetMutableRoot<Scene>(buf);
}

inline bool VerifySceneBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<renderpipe::proto::Scene>(nullptr);
}

inline bool VerifySizePrefixedSceneBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<renderpipe::proto::Scene>(nullptr);
}

inline void FinishSceneBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<renderpipe::proto::Scene> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSceneBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<renderpipe::proto::Scene> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace proto
}  // namespace renderpipe

#endif  // FLATBUFFERS_GENERATED_RENDERPIPE_RENDERPIPE_PROTO_H_
