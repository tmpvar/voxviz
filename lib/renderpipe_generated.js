// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var renderpipe = renderpipe || {};

/**
 * @const
 * @namespace
 */
renderpipe.proto = renderpipe.proto || {};

/**
 * @constructor
 */
renderpipe.proto.uvec3 = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {renderpipe.proto.uvec3}
 */
renderpipe.proto.uvec3.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {number}
 */
renderpipe.proto.uvec3.prototype.x = function() {
  return this.bb.readUint32(this.bb_pos);
};

/**
 * @param {number} value
 * @returns {boolean}
 */
renderpipe.proto.uvec3.prototype.mutate_x = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 0);

  if (offset === 0) {
    return false;
  }

  this.bb.writeUint32(this.bb_pos + offset, value);
  return true;
};

/**
 * @returns {number}
 */
renderpipe.proto.uvec3.prototype.y = function() {
  return this.bb.readUint32(this.bb_pos + 4);
};

/**
 * @param {number} value
 * @returns {boolean}
 */
renderpipe.proto.uvec3.prototype.mutate_y = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 4);

  if (offset === 0) {
    return false;
  }

  this.bb.writeUint32(this.bb_pos + offset, value);
  return true;
};

/**
 * @returns {number}
 */
renderpipe.proto.uvec3.prototype.z = function() {
  return this.bb.readUint32(this.bb_pos + 8);
};

/**
 * @param {number} value
 * @returns {boolean}
 */
renderpipe.proto.uvec3.prototype.mutate_z = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 8);

  if (offset === 0) {
    return false;
  }

  this.bb.writeUint32(this.bb_pos + offset, value);
  return true;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @returns {flatbuffers.Offset}
 */
renderpipe.proto.uvec3.createuvec3 = function(builder, x, y, z) {
  builder.prep(4, 12);
  builder.writeInt32(z);
  builder.writeInt32(y);
  builder.writeInt32(x);
  return builder.offset();
};

/**
 * @constructor
 */
renderpipe.proto.Buffer = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {renderpipe.proto.Buffer}
 */
renderpipe.proto.Buffer.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {renderpipe.proto.Buffer=} obj
 * @returns {renderpipe.proto.Buffer}
 */
renderpipe.proto.Buffer.getRootAsBuffer = function(bb, obj) {
  return (obj || new renderpipe.proto.Buffer).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {renderpipe.proto.uvec3=} obj
 * @returns {renderpipe.proto.uvec3|null}
 */
renderpipe.proto.Buffer.prototype.dims = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new renderpipe.proto.uvec3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @returns {number}
 */
renderpipe.proto.Buffer.prototype.length = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param {number} value
 * @returns {boolean}
 */
renderpipe.proto.Buffer.prototype.mutate_length = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 6);

  if (offset === 0) {
    return false;
  }

  this.bb.writeUint32(this.bb_pos + offset, value);
  return true;
};

/**
 * @param {number} index
 * @returns {number}
 */
renderpipe.proto.Buffer.prototype.initial = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
};

/**
 * @returns {number}
 */
renderpipe.proto.Buffer.prototype.initialLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Uint8Array}
 */
renderpipe.proto.Buffer.prototype.initialArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
renderpipe.proto.Buffer.startBuffer = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} dimsOffset
 */
renderpipe.proto.Buffer.addDims = function(builder, dimsOffset) {
  builder.addFieldStruct(0, dimsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} length
 */
renderpipe.proto.Buffer.addLength = function(builder, length) {
  builder.addFieldInt32(1, length, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} initialOffset
 */
renderpipe.proto.Buffer.addInitial = function(builder, initialOffset) {
  builder.addFieldOffset(2, initialOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
renderpipe.proto.Buffer.createInitialVector = function(builder, data) {
  builder.startVector(1, data.length, 1);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
renderpipe.proto.Buffer.startInitialVector = function(builder, numElems) {
  builder.startVector(1, numElems, 1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
renderpipe.proto.Buffer.endBuffer = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} dimsOffset
 * @param {number} length
 * @param {flatbuffers.Offset} initialOffset
 * @returns {flatbuffers.Offset}
 */
renderpipe.proto.Buffer.createBuffer = function(builder, dimsOffset, length, initialOffset) {
  renderpipe.proto.Buffer.startBuffer(builder);
  renderpipe.proto.Buffer.addDims(builder, dimsOffset);
  renderpipe.proto.Buffer.addLength(builder, length);
  renderpipe.proto.Buffer.addInitial(builder, initialOffset);
  return renderpipe.proto.Buffer.endBuffer(builder);
}

/**
 * @constructor
 */
renderpipe.proto.Scene = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {renderpipe.proto.Scene}
 */
renderpipe.proto.Scene.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {renderpipe.proto.Scene=} obj
 * @returns {renderpipe.proto.Scene}
 */
renderpipe.proto.Scene.getRootAsScene = function(bb, obj) {
  return (obj || new renderpipe.proto.Scene).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {renderpipe.proto.Buffer=} obj
 * @returns {renderpipe.proto.Buffer}
 */
renderpipe.proto.Scene.prototype.buffers = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new renderpipe.proto.Buffer).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
renderpipe.proto.Scene.prototype.buffersLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
renderpipe.proto.Scene.startScene = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} buffersOffset
 */
renderpipe.proto.Scene.addBuffers = function(builder, buffersOffset) {
  builder.addFieldOffset(0, buffersOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
renderpipe.proto.Scene.createBuffersVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
renderpipe.proto.Scene.startBuffersVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
renderpipe.proto.Scene.endScene = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
renderpipe.proto.Scene.finishSceneBuffer = function(builder, offset) {
  builder.finish(offset);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} buffersOffset
 * @returns {flatbuffers.Offset}
 */
renderpipe.proto.Scene.createScene = function(builder, buffersOffset) {
  renderpipe.proto.Scene.startScene(builder);
  renderpipe.proto.Scene.addBuffers(builder, buffersOffset);
  return renderpipe.proto.Scene.endScene(builder);
}

// Exports for Node.js and RequireJS
this.renderpipe = renderpipe;
