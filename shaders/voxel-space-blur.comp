#version 430 core
#extension GL_NV_gpu_shader5: enable
#extension GL_ARB_bindless_texture : require
#extension GL_ARB_compute_shader: enable

#include "voxel-space.glsl"
#include "cosine-direction.glsl"

layout( local_size_x = 64, local_size_y = 1, local_size_z = 1 ) in;

layout (std430, binding=1) buffer outColorBuffer {
  vec4 out_color[];
};

layout (std430, binding=2) buffer inTerminationBuffer {
  RayTermination in_termination[];
};

layout (std430, binding=7) buffer blueNoiseBuffer {
  vec4 blueNoise[];
};


uniform uvec2 resolution;
uniform uint time;
uniform vec3 eye;
uniform vec3 dims;
uniform float debug;
uniform uint terminationBufferIdx;

#define TAA_SAMPLES 16

bool read(ivec2 pos, out RayTermination termination) {
  if (any(lessThan(pos, ivec2(0))) || any(greaterThanEqual(pos, resolution))) {
    return false;
  }

  uint idx = (pos.x + pos.y * resolution.x);
  termination = in_termination[idx];

  return true;
}


void main() {

  ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
  if (any(greaterThanEqual(pos, resolution))) {
    return;
  }

  RayTermination o;
  read(pos, o);

  //out_color[idx] = vec4(in_termination[idx].position.xyz / vec3(dims), 1.0);
  uint idx = pos.x + pos.y * resolution.x;
  out_color[idx] = in_termination[idx].color;
}
