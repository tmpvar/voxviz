#version 430 core
#extension GL_NV_shader_buffer_load: enable
#extension GL_ARB_compute_shader: enable
#extension GL_NV_gpu_shader5: enable

layout( local_size_x = 64, local_size_y = 16, local_size_z = 1 ) in;

#include "voxel-space.glsl"
#include "points.glsl"

uniform mat4 VP;
uniform vec3 dims;
uniform uint time;
uniform uint maxPoints;

// uses bindings 1-7 and requires `dims`
#include "voxel-space-mips.glsl"

layout (std430, binding=9) buffer pointsBuffer {
  vec4 points[];
};

layout (std430, binding=10) buffer pointsIndirectBuffer {
  DrawArraysIndirectCommand pointsIndirect;
};

void main() {
  uvec3 pos = gl_GlobalInvocationID;
  uvec3 d = uvec3(dims);
  uint idx = atomicAdd(pointsIndirect.primCount, 1);

  //pointsIndirect.primCount++;
  //
  // idx = (
  //   pos.x +
  //   pos.y * d.x +
  //   pos.z * d.x * d.y
  // );


  if (idx >= maxPoints) {
    atomicMin(pointsIndirect.primCount, maxPoints);
    return;
  }


  points[idx] = vec4(
    gl_GlobalInvocationID,
    1.0
  );
}
