#version 430 core
#extension GL_NV_shader_buffer_load: enable
#extension GL_ARB_compute_shader: enable
#extension GL_NV_gpu_shader5: enable

layout( local_size_x = 64, local_size_y = 16, local_size_z = 1 ) in;

#include "voxel-space.glsl"
#include "voxel-space-mips.glsl"
#include "light-space-mips.glsl"
#include "hsl.glsl"
#include "palette.glsl"

uniform uvec2 out_color_dims;
uniform mat4 VP;
uniform uvec2 resolution;

uniform uint time;
uniform uint terminationBufferIdx;


layout (std430) buffer outTerminationBuffer {
  RayTermination out_termination[];
};

layout (std430) buffer blueNoiseBuffer {
  vec4 blueNoise[];
};

vec3 sphereRandom(vec2 r) {
    float cosPhi = r.x * 2.0 - 1.0;
    float sinPhi = sqrt(1 - (cosPhi * cosPhi));
    float theta = r.y * 2.0 * 3.1415927;
    return vec3(sinPhi * cos(theta), sinPhi * cos(theta), cosPhi);
}

vec3 hemisphereRandom(vec2 r) {
    vec3 s = sphereRandom(r);
    return vec3(s.x, s.y, s.z);
}

vec3 cdir(in uint seed, in vec3 normal) {
  // uint slice = (time % 64) * 4096;

  vec2 bn = 2.0 * blueNoise[(seed * time / 10000) % (4096 * 64)].xy - 1.0;
  vec3 d = hemisphereRandom(bn);

  if (normal.x == 1.0) {
    d.x = abs(d.x);
  }

  if (normal.y == 1.0) {
    d.y = abs(d.y);
  }

  if (normal.z == 1.0) {
    d.z = abs(d.z);
  }

  if (normal.x == -1.0) {
    d.x = -abs(d.x);
  }

  if (normal.y == -1.0) {
    d.y = -abs(d.y);
  }

  if (normal.z == -1.0) {
    d.z = -abs(d.z);
  }

  return d;


  float u = bn.x;
  float v = bn.y;

	// // method 3 by fizzer: http://www.amietia.com/lambertnotangent.html
  float a = 6.2831853 * v;
  //u = 2.0*u - 1.0;
  return normalize(
    normal + vec3(sqrt(1.0-u*u) * vec2(cos(a), sin(a)), u)
  );
}

float sum(vec3 v) { return dot(v, vec3(1.0)); }

void main() {
  uvec2 screen_pos = gl_GlobalInvocationID.xy;
  uint screen_idx = screen_pos.x + screen_pos.y * resolution.x;
  uint out_idx = screen_idx;// + terminationBufferIdx;

  RayTermination o = out_termination[out_idx];

  if (all(equal(o.position, vec4(-1.0)))) {
    return;
  }

  vec4 acc = vec4(0.0);
  vec4 tmp;
  for (uint i=0; i<MAX_MIPS; i++) {
    if (light_mip_get(o.position.xyz, i, tmp)) {
      acc += tmp;// * (1.0 - float(i) / float(4));
      //acc = vec4(hsl(vec3((float(i)/float(MAX_MIPS)), 0.9, 0.5)), 1.0 - float(i)/float(MAX_MIPS+1));
      break;
    }
  }

  // if (light_mip_get(o.position.xyz, 0, tmp)) {
  //   acc = tmp;// * (1.0 - float(i) / float(MAX_MIPS));
  //
  //   //vec3 o = hsl(vec3(0.7 - (float(i)/float(MAX_MIPS) * 0.9), 0.9, 0.5));
  //
  //   out_termination[out_idx].color = vec4(o.color.rgb * (vec3(0.0, 1.0, 0.0) * acc.a), 1.0);;
  //   //break;
  // } else {
    out_termination[out_idx].color = o.color.rgba * acc * acc.a;//vec4(o.color.rgb * (acc.rgb * acc.a), 1.0);
  // }
}

void main1() {

  uvec2 screen_pos = gl_GlobalInvocationID.xy;
  uint screen_idx = screen_pos.x + screen_pos.y * resolution.x;
  uint out_idx = screen_idx;// + terminationBufferIdx;

  RayTermination o = out_termination[out_idx];

  if (all(equal(o.position, vec4(-1.0)))) {
    return;
  }

  vec3 normal = o.normal.xyz;
  vec3 origin = o.position.xyz + normal;
  vec3 rayDir = o.rayDir.xyz;
  vec4 voxelColor = o.color;
  // float intensity = 0.0;

  uvec3 udims = uvec3(lightSlabDims);
  uint8_t palette_idx;
  float t = 0.0;
  float steps = 8.0;
  vec4 acc = vec4(0.0);
  float ticks = 0.0;

  vec3 cd = cdir(
    uint(
      float(time) * length(o.position)
    ),
    normal
  );

  vec3 dir = normalize(normal + cd);
  float i = 0;
  float intensity = 1.0;
  vec4 tmp;
  for (i=0.0; i<steps && intensity > 0.0; i++) {
    vec3 p = origin + dir * t;

    if (
      any(lessThan(p, vec3(0.0))) ||
      any(greaterThanEqual(p, vec3(lightSlabDims)))
    ) {
      break;
    }

    for (uint i=0; i<MAX_MIPS; i++) {
      if (light_mip_get(p, i, tmp)) {
        acc += tmp * (1.0 - float(i) / float(MAX_MIPS)) * intensity;
      }
    }


    uint mipLevel = max(1, uint(t * 0.15));

    if (voxel_mip_get(p, mipLevel, palette_idx)) {
      uint occ = uint(palette_idx);
      float total = 0.0;
      total += (occ & (1<<0)) > 0 ? 1.0 : 0.0;
      total += (occ & (1<<1)) > 0 ? 1.0 : 0.0;
      total += (occ & (1<<2)) > 0 ? 1.0 : 0.0;
      total += (occ & (1<<3)) > 0 ? 1.0 : 0.0;
      total += (occ & (1<<4)) > 0 ? 1.0 : 0.0;
      total += (occ & (1<<5)) > 0 ? 1.0 : 0.0;
      total += (occ & (1<<6)) > 0 ? 1.0 : 0.0;
      total += (occ & (1<<7)) > 0 ? 1.0 : 0.0;
      intensity *= total / 8.0;
    //   //break;
    }

  //   Light light = lights[i];
  //   voxelColor = max(voxelColor, light.color * trace_light(o, light));
    t += max(1.0, t*0.5);
  }
  acc /= i;
  out_termination[out_idx].color =  sqrt(voxelColor * acc * acc.a);
}
