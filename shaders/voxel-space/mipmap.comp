#version 430 core
#extension GL_NV_shader_buffer_load: enable
#extension GL_ARB_compute_shader: enable
#extension GL_NV_gpu_shader5: enable

layout( local_size_x = 8, local_size_y = 4, local_size_z = 1 ) in;

uniform uvec3 mipDims;
uniform uvec3 lowerMipDims;
uniform uint mipLevel;

#include "../voxel-space-mips.glsl"

uniform layout(r8) image3D worldSpaceVoxelImage;
uniform layout(r8) image3D worldSpaceVoxelImageLower;

float read(uvec3 pos) {
  uvec3 p = pos << 1;

  if (any(greaterThanEqual(p, lowerMipDims))) {
    return 0;
  }

  return imageLoad(worldSpaceVoxelImageLower, ivec3(p)).x;
}

void main() {
  uvec3 pos = gl_GlobalInvocationID.xyz;
  if (any(greaterThanEqual(pos, mipDims))) {
    return;
  }

  float density = 0.0;
  float slots = volumeSlabDims.x * volumeSlabDims.y * volumeSlabDims.z;
  vec2 lod = lod_defs[mipLevel-1];
  uint offset = uint(slots * lod.x);

  density += read(pos + uvec3(0, 0, 0));
  density += read(pos + uvec3(1, 0, 0));
  density += read(pos + uvec3(1, 1, 0));
  density += read(pos + uvec3(0, 1, 0));
  density += read(pos + uvec3(0, 0, 1));
  density += read(pos + uvec3(1, 0, 1));
  density += read(pos + uvec3(1, 1, 1));
  density += read(pos + uvec3(0, 1, 1));

  imageStore(worldSpaceVoxelImage, ivec3(pos), vec4(density / 8.0)).x;
}
