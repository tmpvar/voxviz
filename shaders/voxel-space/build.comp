#version 430 core
#extension GL_NV_shader_buffer_load: enable
#extension GL_ARB_compute_shader: enable
#extension GL_NV_gpu_shader5: enable

layout( local_size_x = 4, local_size_y = 4, local_size_z = 4 ) in;

layout (std430) buffer worldSpaceVoxelBuffer {
  uint8_t world_voxels[];
};

layout (std430) buffer modelSpaceVoxelBuffer {
  uint8_t model_voxels[];
};

uniform uvec3 worldSpaceDims;
uniform uvec3 modelSpaceDims;
uniform mat4 model;
void main() {
  uvec3 pos = gl_GlobalInvocationID.xyz;

  uint read_idx = (
    pos.x +
    pos.y * modelSpaceDims.x +
    pos.z * modelSpaceDims.x * modelSpaceDims.y
  );

  uint8_t model_value = model_voxels[read_idx];

  if (any(greaterThanEqual(pos, modelSpaceDims)) || model_value == uint8_t(0)) {
    return;
  }

  vec4 hpos = model * vec4(pos, 1.0);
  vec3 write_pos = floor(hpos.xyz / hpos.w);

  if (
    any(lessThanEqual(write_pos, vec3(0.0))) ||
    any(greaterThanEqual(write_pos, vec3(worldSpaceDims)))
  ) {
    return;
  }

  uint write_idx = (
    uint(write_pos.x) +
    uint(write_pos.y) * worldSpaceDims.x +
    uint(write_pos.z) * worldSpaceDims.x * worldSpaceDims.y
  );

  world_voxels[write_idx] = model_value;
}
