#version 430 core
#extension GL_NV_shader_buffer_load: enable
#extension GL_ARB_compute_shader: enable
#extension GL_NV_gpu_shader5: enable

layout( local_size_x = 32, local_size_y = 1, local_size_z = 16 ) in;

layout (std430, binding=1) buffer sourceVolumeSlab {
  uint8_t src_volume[];
};

layout (std430, binding=2) buffer destVolumeSlab {
  uint8_t dest_volume[];
};


uniform uvec3 destDims;
uniform uvec3 sourceScale;

uint read(uvec3 pos, uvec3 dims) {
  if (any(greaterThan(pos, dims))) {
    return 0;
  }

  uint idx = (
    pos.x +
    pos.y * dims.x +
    pos.z * dims.x * dims.y
  );
  return uint(src_volume[idx]) > 0 ? 1 : 0;
}

void write(uvec3 pos, uint val) {
  uint idx = (
    pos.x +
    pos.y * destDims.x +
    pos.z * destDims.x * destDims.y
  );
  dest_volume[idx] = uint8_t(val);
}

void main() {
  uvec3 dest_pos = gl_GlobalInvocationID.xyz;
  if (any(greaterThanEqual(dest_pos, destDims))) {
    return;
  }

  uint scale = 2;
  uvec3 src_pos = dest_pos * scale;
  uvec3 src_dims = destDims * scale;
  uint density = 0;

  density += read(src_pos + uvec3(0, 0, 0), src_dims) != 0 ? 1 : 0;
  density += read(src_pos + uvec3(1, 0, 0), src_dims) != 0 ? 1 : 0;
  density += read(src_pos + uvec3(1, 1, 0), src_dims) != 0 ? 1 : 0;
  density += read(src_pos + uvec3(0, 1, 0), src_dims) != 0 ? 1 : 0;
  density += read(src_pos + uvec3(0, 0, 1), src_dims) != 0 ? 1 : 0;
  density += read(src_pos + uvec3(1, 0, 1), src_dims) != 0 ? 1 : 0;
  density += read(src_pos + uvec3(1, 1, 1), src_dims) != 0 ? 1 : 0;
  density += read(src_pos + uvec3(0, 1, 1), src_dims) != 0 ? 1 : 0;

  write(dest_pos, density);
}
