#version 430 core

#extension GL_ARB_compute_shader: enable


layout( local_size_x = 32 , local_size_y = 16, local_size_z = 1 ) in;

#include "voxel-space-mips.glsl"
#include "light-space-mips.glsl"

#include "ray-aabb.glsl"
#include "palette.glsl"
#include "cosine-direction.glsl"
#include "voxel-space.glsl"
#include "hsl.glsl"


uniform mat4 VP;
uniform uvec2 resolution;
uniform float debug;
uniform vec3 eye;

uniform uint time;
uniform uint terminationBufferIdx;
uniform uvec3 lightPos;
uniform vec3 lightColor;

uniform vec3 characterPos;


layout (std430) buffer outTerminationBuffer {
  RayTermination out_termination[];
};

layout (std430) buffer blueNoiseBuffer {
  vec4 blueNoise[];
};

layout (std430) buffer outColorBuffer {
  vec4 out_color[];
};

#define ITERATIONS 512

vec2 noise2d(uvec3 pos) {
  uint idx = (pos.x % 64) + (pos.y%64) * 64 + (pos.z%64) * 64 * 64;
  return 2.0 * blueNoise[idx].xy - 1.0;
}

vec3 cangle(uvec3 pos, vec3 normal) {
  vec2 uv = noise2d(pos) * 0.1;
  float a = 6.2831853 * uv.y;
  float u = uv.x;//2.0*uv.x - 1.0;
  return normalize( normal + vec3(sqrt(1.0-u*u) * vec2(cos(a), sin(a)), u) );
}

vec3 cdir(in uint seed, in vec3 normal) {
  // uint slice = (time % 64) * 4096;

  vec2 bn = 2.0 * blueNoise[(seed * time * 1000) % (4096 * 64)].xy - 0.5;

  float u = bn.x;
  float v = bn.y;

	// // method 3 by fizzer: http://www.amietia.com/lambertnotangent.html
  float a = 6.2831853 * v;
  //u = 2.0*u - 1.0;
  return normalize(
    normal + vec3(sqrt(1.0-u*u) * vec2(cos(a), sin(a)), u)
  );
}

struct RayHit {
  vec3 pos;
  vec3 dir;
  float t;
  vec3 normal;
};

vec3 compute_ray_dir(vec2 uv, mat4 inv) {
  vec4 far = inv * vec4(-uv.x, uv.y, 1.0, 1.0);
  far /= far.w;
  vec4 near = inv * vec4(-uv.x, uv.y, 0.5, 1.0);
  near /= near.w;

  return normalize(far.xyz - near.xyz);
}

float sum(vec3 v) { return dot(v, vec3(1.0)); }

void main() {
  if (any(greaterThanEqual(gl_GlobalInvocationID.xy, resolution))) {
    return;
  }

  vec2 uv = vec2(gl_GlobalInvocationID.xy) / vec2(resolution) * 2.0 - 1.0;
  uvec2 out_color_pos = gl_GlobalInvocationID.xy;
  uint out_color_idx = out_color_pos.x + out_color_pos.y * resolution.x;
  uint out_termination_idx = out_color_idx + terminationBufferIdx;
  vec3 in_ray_dir = compute_ray_dir(uv, inverse(VP));

  float found_distance;
  vec3 found_normal = vec3(0.0);
  vec3 hd = volumeSlabDims * 0.5;

  bool hit;
  if (all(greaterThanEqual(eye, vec3(0.0))) && all(lessThan(eye, volumeSlabDims))) {
    hit = true;//pos = eye + in_ray_dir * 0.001;
    found_distance = 0.0;
  } else {
    hit = ourIntersectBoxCommon(
      hd,
      hd,
      eye,
      in_ray_dir,
      1.0 / in_ray_dir,
      found_distance,
      found_normal
    );
    found_distance += 0.1;
  }
  out_termination[out_termination_idx].color = vec4(0.0);
  out_termination[out_termination_idx].rayDir = vec4(in_ray_dir, 1.0);
  if (!hit) {
    out_color[out_termination_idx] = vec4(0.0);
    out_termination[out_termination_idx].position = vec4(-1.0);
    out_termination[out_termination_idx].normal = vec4(found_normal, 1.0);
    return;
  }


  uint palette_idx;
  vec3 c = vec3(0.0);
  int i;

  int mip = 3;
  vec3 d = in_ray_dir;
  vec3 id = 1.0 / d;
  vec3 p = eye + d * found_distance;
  vec3 prevP = eye;// - d * 2.0;

  float dt = 1.0 / length(volumeSlabDims);
  float t = found_distance;
  float opacityDiv = 1.0 / 8.0;

  int minMip = 0;
  int maxMip = MAX_MIPS;
  mip = maxMip;
  float mipSize = (float(1<<(mip)));
  float invMipSize = 1.0 / mipSize;
  vec3 mask;
  bool miss = true;
  for (i=0; i<ITERATIONS; i++) {
    if (
      any(lessThan(p, vec3(0.0))) ||
      any(greaterThanEqual(p, vec3(volumeSlabDims)))
    ) {
      break;
    }

    // test light space
    // vec4 lightAtPos = vec4(0.0);
    // vec4 acc = vec4(0.0);
    // bool inLight = false;
    // for (uint i=0; i<MAX_MIPS; i++) {
    //   if (light_mip_get(p, i, lightAtPos)) {
    //     inLight = true;
    //     acc += lightAtPos;
    //     break;
    //   }
    // }
    //
    // if (inLight) {
    //   c = lightAtPos.rgb * lightAtPos.a;
    //   found_normal = -sign(d) *
    //                  step(prevP.xyz, prevP.yzx) *
    //                  step(prevP.xyz, prevP.zxy);
    //   miss = false;
    //   break;
    // }

    if (voxel_mip_get(p, mip, palette_idx)) {
      if (mip == minMip) {
        c = palette_color(palette_idx);

        // if the ray have moved since we intersected the outer bounding box then
        // we should recompute a normal.
        if (found_distance != t) {
          found_normal = -sign(d) *
                          step(prevP.xyz, prevP.yzx) *
                          step(prevP.xyz, prevP.zxy);
        }

        miss = false;
        break;
      }

      mip = max(mip - 1, minMip);
      t -= dt * 0.00125;

      mipSize = (float(1<<(mip)));
      invMipSize = 1.0 / mipSize;
      continue;
    }
    else if (mip < maxMip && !voxel_mip_get(p, min(mip + 1, maxMip), palette_idx)) {
      mip = min(maxMip, mip+1);
      mipSize = (float(1<<(mip)));
      invMipSize = 1.0 / mipSize;
      t += dt * 0.00125;
    }

    vec3 deltas = (step(0.0, d) - fract(p * invMipSize)) * id;
    dt = max(mincomp(deltas), 0.0001) * mipSize;
    t += dt;
    // FIXME: we get ~1ms back if this is enabled, but lose the ability to
    //        compute good face normals. There is likely a better mechanism
    //        for increasing marching speed at further distances (cone marching?)
    //t += max(0.1,t/1024);
    prevP = deltas;
    p = eye + d * t;
  }
  if (debug == 1.0) {
    c = hsl(vec3(0.7 - (float(i)/float(ITERATIONS) * 0.9), 0.9, 0.5));
  }

  out_color[out_termination_idx] = vec4(c, 1.0);

  out_termination[out_termination_idx].color = vec4(c, 1.0);
  out_termination[out_termination_idx].position = miss ? vec4(-1.0) : vec4(p, 1.0);
  out_termination[out_termination_idx].normal = vec4(found_normal, 1.0);
}
