#version 430 core
#extension GL_NV_shader_buffer_load: enable
//#extension GL_ARB_compute_variable_group_size: enable
#extension GL_ARB_compute_shader: enable
#extension GL_NV_gpu_shader5: enable

#include "../include/core.h"

uniform float *volumeBuffer;
uniform float *toolBuffer;
uniform ivec3  toolOffset;
uniform mat4 toolToVolume;

// TODO: how do we cut transformed bricks?
// TODO: how do we cut using transformed bricks?

// TODO: use variable group size so we can better control the
//       slice size
layout( local_size_x = BRICK_DIAMETER, local_size_y = 1, local_size_z = 1 ) in;

void main() {
	ivec3 pos = ivec3(gl_GlobalInvocationID);
	ivec3 volumePos = pos + toolOffset;
	ivec3 toolPos = pos;

	if (
		any(lessThan(volumePos, vec3(0))) ||
		any(greaterThanEqual(volumePos, vec3(BRICK_DIAMETER))) 
	) {
	  return;
	}

	uint volumeIdx = volumePos.x + volumePos.y * BRICK_DIAMETER + volumePos.z * BRICK_DIAMETER * BRICK_DIAMETER;
	uint toolIdx = toolPos.x + toolPos.y * BRICK_DIAMETER + toolPos.z * BRICK_DIAMETER * BRICK_DIAMETER;
	if (toolBuffer[toolIdx] > 0.0) {
		volumeBuffer[volumeIdx] = 0.0;
	}
}