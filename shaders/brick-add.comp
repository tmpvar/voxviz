#version 430 core
#extension GL_ARB_compute_shader: enable
#extension GL_NV_gpu_shader5: enable

#include "voxel.glsl"

uniform uint32_t brick_index_stock;
uniform uint32_t brick_index_tool;

uniform vec3 toolBrickIndex;
uniform vec3 stockBrickIndex;
uniform mat4 stockToTool;


// TODO: how do we cut transformed bricks?
// TODO: how do we cut using transformed bricks?

// TODO: use variable group size so we can better control the
//       slice size
layout( local_size_x = 16, local_size_y = 1, local_size_z = 1 ) in;

vec3 tx(mat4 m, vec3 v) {
  vec4 tmp = m * vec4(v, 1.0);
  return tmp.xyz / tmp.w;
}

bool oob(vec3 pos) {
  return any(lessThan(pos, vec3(0))) || any(greaterThanEqual(pos, vec3(BRICK_DIAMETER)));
}

void main() {
	uint idx = gl_GlobalInvocationID.x;
  if (idx > BRICK_VOXEL_WORDS) {
    return;
  }

	uint lower = idx * VOXEL_WORD_BITS;

  uint val = bricks[brick_index_stock].data[idx];
  BrickData tool = bricks[brick_index_tool];
	for (uint i = 0; i < VOXEL_WORD_BITS; i++) {
    uint p = lower + i;
		uint set_mask = 1 << i;

		vec3 stockVoxel = vec3(
			p % BRICK_DIAMETER,
			(p / BRICK_DIAMETER) % BRICK_DIAMETER,
			((p / BRICK_DIAMETER) / BRICK_DIAMETER) % BRICK_DIAMETER
		);

		vec3 localPos = stockBrickIndex + (vec3(stockVoxel) + 0.5) * INV_BRICK_DIAMETER;
		// transform the point back into tool space
		vec3 v2 = tx(stockToTool, localPos);
		vec3 toolVoxel = (v2 - toolBrickIndex) * BRICK_DIAMETER;

    if (oob(toolVoxel)) {
      continue;
    }

	  val |= voxel_get(brick_index_tool, vec3(toolVoxel)) ? set_mask : 0;
	}
  bricks[brick_index_stock].data[idx] = val;
}
